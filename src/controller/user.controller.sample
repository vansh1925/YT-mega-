import { asyncHandler } from "../utils/asyncHandler.js";

import { ApiError } from "../utils/ApiErrors.js"
import { User } from "../models/user.models.js"
import { upload } from "../utils/Cloudinary.js"
import { ApiResponse } from "../utils/ApiResponse.js";


//no need to use asyncHandler as it is not handling any web request
const generateAccessAndRefreshTokens = async (userid) => {
    //now for this we have to pass user id
    try {
        const user = await User.findById(userid)
        const refreshToken = user.generateRefreshToken()
        const accessToken = user.generateAccessToken()
        //now dbmain bhi to refreshTOken ko daalna hai for this
        User.refreshToken = refreshToken;
        //ab isko save karna bhi jaruri
        await User.save(
            { validateBeforeSave: false }//why validate as model main pass required hai to vo sab cjjeje error de sakti hai so for that hamne aisa maana lki jo daala hain vo sahihoga to validate  na kr seedha daalde
        )
        //inko return bhi to karana hai
        return { accessToken, refreshToken }
    }
    catch (error) {
        throw new ApiError(500, "Something went wrong while generating the refresh and access token")
    }
}

/*these are the steps for registering a user
// get user details from frontend
// validation – not empty
// check if user already exists: username, email
// check for images, check for avatar
// upload them to cloudinary, avatar
// create user object – create entry in db
// remove password and refresh token field from response
// check for user creation
// return res
*/
export const registerUser = asyncHandler(async (req, res) => {
    const { fullname, email, username, password } = req.body//req.body matlab jab bhi form se data le ya ui se jo data aaye for url and params we will see later
    console.log("email:", email);



    //now check krenge ki fields empty to nhi

    //now aise har cheej main checking ke liye kitne if else lagenge so for that we will use
    // if(fullname ===""){
    //     throw new ApiError(400,"fullname is required");
    // }
    if ([fullname, email, username, password].some((field) =>
        field?.trim() === "")//yahan ! krke bhi kr skte the to === "" nhi krna part
    )
    /*?. is the optional chaining means it safely access .trim() only if field is not nill or undefined and
    it prevents error like cannot read properties of undefined.
    
    trim is used to remoe extra space from start and end of a string  isse "  " isko bhi empty maanenge
    
    some array ka ek method hai ki if at least one element in the array meets condition return t/f ie agar sab false hogi to hi f aayega varna if ek bhi t to t */ {
        throw new ApiError(400, "All fields are required");
        /* new keyword is used to create instance of a class as apierror ek class banai thi toyahan ek obj ban rha hai*/
    }

    //now we will check ki same user registered na ho pehale se to iske liye jo mongoose schem banayi thi vo import
    const exitingUser = await User.findOne({
        $or: [{ username }, { email }]
        /* $or mongoose main use kiya jaata hai it checks if either userrname exist OR email exists
        
        findOne finds the first entry that matches the filter
        aise hi findById hota hai jo _id se dhundta hai vo khud n=banti hai har data entry ki*/

    })
    if (exitingUser) {
        throw new ApiError(409, "User with email or username exists.") //agar vo apierror vali js file nhi banai hoti to res.send err ye sabkrna hota
    }

    //now image vala kaam
    /*hamne abhi tk req.body se kaam kia hai but middleware req main aur bhi cheeje add kr deti hai
    to now multer deta hai req.files no*/
    const avatarLocalPath = req.files?.avatar[0]?.path
    const coverImageLocalPath = req.files?.coverImage[0]?.path
    if (!avatarLocalPath) {
        throw new ApiError(400, "Avatar file is required")
    }
    //ab isko clodinary pe upload karana hai
    const avatar = await upload(avatarLocalPath)
    const coverImage = await upload(coverImageLocalPath)

    //ab avatar ka hona compulsory hai to vo check kra
    if (!avatar) {
        throw new ApiError(400, "Avatar file is required")
    }
    //ab data ko upload krana on db User ka hi use krke ie user ka model
    const user = await User.create({
        fullname,
        avatar: avatar.url,//ueh url jo hai vo cloudinary ke response hi aaya hai
        coverImage: coverImage?.url || "",/*yahan yeh field req nhi thi isliye agr user na diya ho to code na fate isliye check kiya nhi hai to "" empty dede yeh
                                        same cheej avatar ke saath nhi ki as vo to compulsory hai to uska check upar kia hi hai*/
        email,
        password,
        username: username.toLowerCase()

    })
    //ab check ki user create hua bhi hai ya ni
    const createdUser = await User.findById(user._id)
        .select("-password-refreshToken")

    if (!createdUser) {
        throw new ApiError(500, "something went wrong while registering the user")
    }


    /*now pass aur refresh token ko kyun hataya as  we never want to expose sensitive info pass even if it 
    is had=shed and ref token as it can also be hijack if leaked and we dont wan to gic=v =e it as a response to frontend
    ab jo line hai  select vali usmain - sign ka use kr ke humne unhe exclude kr diya to saari field return hongi except these
    and iska matlab yeh ni ki vo db se hi hat gye we are just not including in api response*/

    //ab user ban gya to ek response bhejdo ki hogya
    /*
    hum chahte to yeh bhi de skte but hamne ek standard way banaya hai 
    return res.status(201).json({createdUser})*/
    return res.status(201).json(
        new ApiResponse(200, createdUser, "User registered successfully")
    )

})

/*these are the steps for login of a user

/*firstly accesstoken aur refresh token ka funda samajh 
Jab user register ya login karta hai, toh server 2 token banata hai:

Access Token (short-lived, e.g., 15 mins ke liye valid)

Refresh Token (long-lived, e.g., 7 days ke liye valid)

Ab maan lo user 5 din baad website kholta hai,

Toh usse dubara email/password dalne ki zarurat nahi padti, kyunki uske paas abhi bhi refresh token cookie mein hota hai.

Server pehle dekhta hai ki:

Access token valid hai ya nahi?

Agar access token expire ho chuka hai, toh refresh token ka use hota hai.

Server refresh token ko verify karta hai:

Agar refresh token valid hai, toh:

Ek naya access token generate hota hai

User ko bina login kiye access mil jaata hai

Agar refresh token invalid ya expire ho chuka hai, toh:

Server ek naya refresh token aur access token dono banata hai

Ya user se firse login karne ko bolta hai (depends on logic)

Yehi process repeat hoti hai jab tak refresh token valid hai

Aur jaise hi refresh token bhi expire ho jaata hai ya cookie delete ho jaati hai → user ko firse login karna padta hai.
*/
           me                                                        sir
//get user email,pass from frontend                   ||     req body ->data liya                
//validation                                          ||     username or email
//check if user exists by comparing the access token  ||     find the user
                                                      ||     pass check
//if not then refresh se naya banta if refresh bhi    ||     access and refresh token
 ni to new refresh banta aur fir se login hota hai    ||     send cookie

const loginUser = asyncHandler(async (req, res) => {
    //data liya
    const { email, username, pass } = req.body
    //depends ki kis se login krana hai hai if only email to sirf !email krdo if only username to vice versa else dono compulsory hai.
    if (!username || !email) {
        throw new ApiError(400, "username or email is required.")
    }//find user
    const user = await User.findOne({
        $or: [username, email]
    })
    if (!user) {
        throw new ApiError(400, "User does not existed")
    }
    //pass check 
    const isPasswordValid = await user.isPasswordCorrect(password)
    if (!isPasswordValid) {
        throw new ApiError(401, "invalid password")
    }

    //now access token and refresh token generate as its a common utility so we ll make a diff fx for it ^
    //now vo generate ho gye unkolaane ke liyw
    const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(user._id)
    const loggedInUser = await User.findById(user._id).select("-password-refreshToken")//now ye step isliye kiya as hum yhi pass karenge cookie main to like sb details to nhi deni na 
    //now ab cookies send karenge iske lie ek obj creayte krna hoga
    const options = {
        httpOnly: true,
        secure: true
        //in dono ko true krna ka benefit yeh hai ki bydefault in cookies ko koi bhi edit kr skata hai frontend se to isko rokne ke liy hum ye krte hain and is wajah se onlly server hi edit kr skta
    }
    //now ab response return krenge
    return res.status(200)
        .cookie("accessToken", accessToken, options)
        .cookie("refreshToken", refreshToken, options)
        .json(
            new ApiResponse(200,
                {
                    user: loggedInUser, accessToken, refreshToken/*yahan isliye diya ki Mobile apps don’t handle cookies automatically like browsers do.
                                                                    So if you send the token only as cookies, mobile clients won’t know how to extract or use it.
                                                                    Therefore, you also send the tokens in the response body like this:*/
                },
                "User Logged in Successfully"
            )
        )
})
const logOutUser = asyncHandler(async (req, res) => {
    /*now yahan hame firse user ki details chaie but uska access to dusre fx main hai to yahan kaise access lenge like konsi id ka logout karana hai
    like user._id karenge but user ko laane ke liye to kuch details chahie jaise email but vo kaise laaenge as logout to seedha hota hai no response
    so we ll make our own middleware jo verufy krega tokens ko(auth.middleware.js)*/
    await User.findByIdAndUpdate(req.user._id,
        {
            $set: {
                refreshToken: undefined
            }
        },
        {
            new: true,
        }
        //By default, findByIdAndUpdate() returns the old document (before update).
        //But if you add { new: true }, it returns the updated document.
    )
    const options = {
        httpOnly: true,
        secure: true
    }
    return res.status(200)
        .clearCookie("accessToken", options)
        .clearCookie("refreshToken", options)
        .json(new ApiResponse(200, {}, "User Logged out"))

})

const refreshAccessToken=asyncHandler(async (req, res) => {
    //steps
    now we will make the controller for refreshing the access token and then uska endpoint bhi banega ie route 
    Extract the incoming refresh token from cookies or request body.
    Check if the refresh token is present; if not, throw an unauthorized error.
    Verify the refresh token using JWT and the secret key.
    Decode the token and get the user ID.
    Find the user in the database using the decoded ID.
    If user is not found, throw an unauthorized error.
    Check if the provided refresh token matches the one stored in the user's record.
    If tokens don't match, throw an error (token expired or reused).
    Define secure cookie options (httpOnly and secure).
    Generate a new access token and refresh token.
    Set the new tokens in the cookies.
    Send a JSON response with the new tokens.
    Catch any errors and respond with a 401 status and error message.
})


//------------------------***********READ THIS FOR SUB AGG PIPELINE NO GPT NOTHING BEST TO UNDERSTAND ALL****-----------------------
const getUserChannelProfile = asyncHandler(async (req, res) => {
    const { username } = req.params
    if (!username?.trim()) {
        throw new ApiError(400, "username is missing")
    }

    const channel = await User.aggregate([
        /*match :it is used ti filter the user doc whose channel profile
            we are requesting by matching the username ie jo param se username
            matlab kis user ki baat kr rhe say avnsh channel ki baat kr rhe hain*/
        {
            $match: {
                username: username?.toLowerCase()
            }
        },
        /*now lookup is ised to look in the subscriptions schema and find that doc
        jahan channel==this user 's id ie log jino=hone is user ie vansh ko subscribe 
        kra hai to unko ek subscribers name ki array main dal dia*/
        //subscribers count ke liye saare channel dhundenge and unko sum(by sir)
        {
            $lookup: {
                from: "subscriptions",
                localField: "_id",
                foreignField: "channel",// All docs where this user is the "channel"
                as: "subscribers"
            }
        },
        /*now this lookup is looking in the subscriptions collection and finding that doc 
        jahan subscrober ==this user id ie vo channel jiskon isne matlab vansh ne subscribe kia hai*/
        //subscribed ke liye subscriber lenge 
        {
            $lookup: {
                from: "subscriptions",
                localField: "_id",
                foreignField: "subscriber", // All docs where this user is the subscriber
                as: "subscribedTo"
            }
        },
        /* addfields ne yeh do field add krdi subcount aur channelsubtocount  ##a big doubt neeche hai */
        {
            $addFields: {
                subscribersCount: {
                    $size: "$subscribers" // count how many subscribed to this channel
                },

                channelsSubscribedToCount: {
                    $size: "$subscribedTo"// count how many channels this user subscribed to
                },
                isSubscribed: {
                    $cond: {
                        if: { $in: [req.user?._id, "$subscribers.subscriber"] },
                        then: true,
                        else: false
                    }
                }
            }

            /*isSubscribed field ka t/f jaan ke liye cond lagai jo teen cheeje leti hai 
            if ki kya cond hai here-> we checked ki jo loggedin user hai vo subscribers array ke andar hai ya ni
            to jab subscribers.subscriber likha to us se saare subscriber field aa jaaegi  
            $in checks if the viewerId is present in the array of subscriber IDs.

            If yes, it means: “Viewer has already subscribed to this channel.”
            ex bob ke teen subscriber to if un teen main yeh id ie vansh hai to obvio vo  subscribed hoga hi
            */

            //for checking ki subscribed hai ya ni button ke liye we will send t/f to frontedn -> condition lagaenge ki jo subscribers vale field main dekhenge ki main hun ya ni ie user
        },

        //project ka use hota hai ki mujhe kitna showkrna hai to jis field ko show krna hai usko 1 krdo
        {
            $project: {
                fullName: 1,
                username: 1,
                subscribersCount: 1,
                channelsSubscribedToCount: 1,
                isSubscribed: 1,
                avatar: 1,
                coverImage: 1,
                email: 1

            }
        }
    ])

    if (!channel?.length) {//channel ki length nhi huito f and ! se t to if channel hai nhi to yeh run hoga
        throw new ApiError(404, "channel does not exists")
    }

    return res
        .status(200)
        .json(
            new ApiResponse(200, channel[0], "User channel fetched successfully")
        )
    //channel ko console krake dekh neeche dekh
    /* 
    {
    fullName: "Aman Sharma",
    username: "aman",
    subscribersCount: 21,
    channelsSubscribedToCount: 12,
    isSubscribed: true,
    avatar: "...",
    coverImage: "...",
    email: "aman@gmail.com"
    } 
    kuch is tareeke ka response hoga
    
    agar jyada entries match ho to [{},{}..] yeh hpga channel ka console but 
    for our case [{}] only this usmain se humne frontend dev ki shuliyat ke liye channel[0]
    bhej diya ie only {} yeh jismain upar vala data hoga*/



    /*yeh jitni bhi fields add hui hain vo vitually add hui hain temorarily aggregation result main na ki permanently
    to jo sub count, channel subcribed to count ya is sub yeh teeno field main pehli do field 
    array hai jinmain see breif expl beloe ki pura data kasie store hora hai
    // Users
    {
    _id: ObjectId("user1"),
    username: "alice"
    },
    {
    _id: ObjectId("user2"),
    username: "bob"
    },
    {
    _id: ObjectId("user3"),
    username: "charlie"
    }
    // Subscriptions
    {
    _id: ObjectId("sub1"),
    channel: ObjectId("user1"),        // alice's channel
    subscriber: ObjectId("user2")      // bob subscribed to alice
    },
    {
    _id: ObjectId("sub2"),
    channel: ObjectId("user1"),        // alice's channel
    subscriber: ObjectId("user3")      // charlie subscribed to alice
    },
    {
    _id: ObjectId("sub3"),
    channel: ObjectId("user3"),        // charlie's channel
    subscriber: ObjectId("user1")      // alice subscribed to charlie
    }


    $match
    { username: "alice" }

    $lookup: {
    from: "subscriptions",
    localField: "_id",         // _id of alice (user1)
    foreignField: "channel",   // find subs where alice is the "channel"
    as: "subscribers"
    }

    //result 
    subscribers: [
    {
        _id: "sub1",
        channel: "user1",       // alice
        subscriber: "user2"     // bob
    },
    {
        _id: "sub2",
        channel: "user1",       // alice
        subscriber: "user3"     // charlie
    }
    ]

    $lookup: {
    from: "subscriptions",
    localField: "_id",         // _id of alice (user1)
    foreignField: "subscriber",// find subs where alice is "subscriber"
    as: "subscribedTo"
    }

    //result 
    subscribedTo: [
    {
        _id: "sub3",
        channel: "user3",       // charlie
        subscriber: "user1"     // alice
    }
    ]


    //to finally kya hua
    {
    _id: "user1",
    username: "alice",
    subscribers: [
        { channel: "user1", subscriber: "user2" },
        { channel: "user1", subscriber: "user3" }
    ],
    subscribedTo: [
        { channel: "user3", subscriber: "user1" }
    ],
    subscribersCount: 2,
    channelsSubscribedToCount: 1,
    isSubscribed: false // unless req.user._id === user2 or user3
    }

    to basically jo vo field add hui hain unmain $size se un array ka length aa gaya
  */
})


const getWatchHistory = asyncHandler(async (req, res) => {
  const user = await User.aggregate([
    {
      // Stage 1: Find the logged-in user by _id
      $match: {
        _id: new mongoose.Types.ObjectId(req.user._id),
      },
    },
    {
      // Stage 2: Lookup videos based on the user's watchHistory array (array of video _ids)
      $lookup: {
        from: "videos",
        localField: "watchHistory", // [ObjectId("video111"), ObjectId("video222")]
        foreignField: "_id",
        as: "watchHistory", // will replace array of ids with full video objects

        // Optional: enrich each video further
        pipeline: [
          {
            // Lookup the owner of each video (from 'users' collection)
            $lookup: {
              from: "users",
              localField: "owner", // owner _id in videos
              foreignField: "_id",
              as: "owner", // will be an array of 1 item
              pipeline: [
                {
                  $project: {
                    fullname: 1,
                    username: 1,
                    avatar: 1,
                  },
                },
              ],
            },
          },
          {
            // Flatten the owner array into an object (array → object)
            $addFields: {
              owner: {
                $first: "$owner", // pick the first (and only) element
              },
            },
          },
        ],
      },
    },
  ]);

  // user is an array, take the first user and return only their enriched watchHistory
  res.status(200).json(user[0]?.watchHistory || []);
});


//finl o/p of watchhistory in user
/*
[
  {
    _id: "video111",
    title: "Intro to AI",
    owner: {
      fullname: "Bob AI",
      username: "bobai",
      avatar: "bob.png"
    }
  },
  {
    _id: "video222",
    title: "Learn Solidity",
    owner: {
      fullname: "Sam Dev",
      username: "samdev",
      avatar: "sam.png"
    }
  }
]
*/






//yahan return ki jarurat ni hai reason-> ❌ return is not required after res.status().json() — because it already terminates the response cycle and return is optional for clarity or early exits, not mandatory.
//console.log krni hai cjeeje jaise req.files req.body response jo clodu=inary pe aaya ur aur bhi thi pehale